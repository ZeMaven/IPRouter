//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NipServiceTsq
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://core.nip.nibss/", ConfigurationName="NipServiceTsq.NIPTSQInterface")]
    public interface NIPTSQInterface
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://core.nip.nibss/NIPTSQInterface/txnstatusquerysingleitemRequest", ReplyAction="http://core.nip.nibss/NIPTSQInterface/txnstatusquerysingleitemResponse")]
        System.Threading.Tasks.Task<NipServiceTsq.txnstatusquerysingleitemResponse> txnstatusquerysingleitemAsync(NipServiceTsq.txnstatusquerysingleitemRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class txnstatusquerysingleitemRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="txnstatusquerysingleitem", Namespace="http://core.nip.nibss/", Order=0)]
        public NipServiceTsq.txnstatusquerysingleitemRequestBody Body;
        
        public txnstatusquerysingleitemRequest()
        {
        }
        
        public txnstatusquerysingleitemRequest(NipServiceTsq.txnstatusquerysingleitemRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class txnstatusquerysingleitemRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string request;
        
        public txnstatusquerysingleitemRequestBody()
        {
        }
        
        public txnstatusquerysingleitemRequestBody(string request)
        {
            this.request = request;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class txnstatusquerysingleitemResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="txnstatusquerysingleitemResponse", Namespace="http://core.nip.nibss/", Order=0)]
        public NipServiceTsq.txnstatusquerysingleitemResponseBody Body;
        
        public txnstatusquerysingleitemResponse()
        {
        }
        
        public txnstatusquerysingleitemResponse(NipServiceTsq.txnstatusquerysingleitemResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class txnstatusquerysingleitemResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string @return;
        
        public txnstatusquerysingleitemResponseBody()
        {
        }
        
        public txnstatusquerysingleitemResponseBody(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface NIPTSQInterfaceChannel : NipServiceTsq.NIPTSQInterface, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class NIPTSQInterfaceClient : System.ServiceModel.ClientBase<NipServiceTsq.NIPTSQInterface>, NipServiceTsq.NIPTSQInterface
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public NIPTSQInterfaceClient() : 
                base(NIPTSQInterfaceClient.GetDefaultBinding(), NIPTSQInterfaceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NIPTQSInterfacePort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NIPTSQInterfaceClient(EndpointConfiguration endpointConfiguration) : 
                base(NIPTSQInterfaceClient.GetBindingForEndpoint(endpointConfiguration), NIPTSQInterfaceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NIPTSQInterfaceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(NIPTSQInterfaceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NIPTSQInterfaceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(NIPTSQInterfaceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NIPTSQInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<NipServiceTsq.txnstatusquerysingleitemResponse> NipServiceTsq.NIPTSQInterface.txnstatusquerysingleitemAsync(NipServiceTsq.txnstatusquerysingleitemRequest request)
        {
            return base.Channel.txnstatusquerysingleitemAsync(request);
        }
        
        public System.Threading.Tasks.Task<NipServiceTsq.txnstatusquerysingleitemResponse> txnstatusquerysingleitemAsync(string request)
        {
            NipServiceTsq.txnstatusquerysingleitemRequest inValue = new NipServiceTsq.txnstatusquerysingleitemRequest();
            inValue.Body = new NipServiceTsq.txnstatusquerysingleitemRequestBody();
            inValue.Body.request = request;
            return ((NipServiceTsq.NIPTSQInterface)(this)).txnstatusquerysingleitemAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NIPTQSInterfacePort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NIPTQSInterfacePort))
            {
                IConfigurationRoot configuration = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json", optional: true, reloadOnChange: true).AddEnvironmentVariables().Build();               
                return new System.ServiceModel.EndpointAddress(configuration.GetSection("NipTranQUrl").Value);
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return NIPTSQInterfaceClient.GetBindingForEndpoint(EndpointConfiguration.NIPTQSInterfacePort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return NIPTSQInterfaceClient.GetEndpointAddress(EndpointConfiguration.NIPTQSInterfacePort);
        }
        
        public enum EndpointConfiguration
        {
            
            NIPTQSInterfacePort,
        }
    }
}
