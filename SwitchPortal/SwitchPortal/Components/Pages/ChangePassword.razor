@page "/changePassword"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SwitchPortal.Models.Dtos
@inject ProtectedLocalStorage ProtectedLocalStore
@inject NavigationManager NavigationManager
@inject IUsers users
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="request" OnValidSubmit="CompleteChangePassword" FormName="ChangePassword">
    @CustomError
    <DataAnnotationsValidator />

    <CustomValidator @ref="customValidator"></CustomValidator>

    <div>
        <InputText @bind-Value="request.OldPassword" id="username" placeholder="working?" />
        <ValidationMessage For="@( () => request.OldPassword)" />
    </div>

    <div>
        <InputText @bind-Value="request.NewPassword" id="password" placeholder="working1?" />
        <ValidationMessage For="@( () => request.NewPassword)" />
    </div>

    <button type="submit">Sign In</button>
</EditForm>

@code {
    private ChangePasswordRequest request = new();
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    private CustomValidator customValidator;
    private string CustomError;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private async Task CompleteChangePassword()
    {
        CustomError = string.Empty;
        var authState = await authenticationState;
        var user = authState?.User;

        var errors = new Dictionary<string, List<string>>();
        ChangePasswordRequest dto = new()
            {
                Username = user.FindFirst(x => x.Type == "username").Value,
                NewPassword = request.NewPassword,
                OldPassword = request.OldPassword
            };

        if (dto.NewPassword == dto.OldPassword)
        {
            errors.Add("NewPassword", new List<string> { "New Password cannot be the same as old password" });
            customValidator.DisplayErrors(errors);
            return;
        }

        var result = await users.ChangePassword(dto);

        if (result.ResponseCode != "00")
        {
            CustomError = result.ResponseMessage;
            return;
        }

        NavigationManager.NavigateTo("Login");
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAnonymous();
        //maybe a pop up telling them password changed successfully
    }
}
