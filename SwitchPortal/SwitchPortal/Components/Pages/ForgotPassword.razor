@page "/forgotpassword"
@using System.ComponentModel.DataAnnotations
@using SwitchPortal.Models.Dtos
@inject IUsers userManager
@inject IUsers users
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]
<h3>ForgotPassword</h3>

<AuthorizeView Roles="Admin, Superuser">
    <Authorized>
        You can
    </Authorized>
    <NotAuthorized>
        You cannot
    </NotAuthorized>
</AuthorizeView>

@if (EnterEmail)
{
    <EditForm Model="request" OnValidSubmit="SendEmail" FormName="ForgotPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <CustomValidator @ref="customValidator"></CustomValidator>

        <div>
            <InputText @bind-Value="request.Username" id="username" placeholder="working?" />
            <ValidationMessage For="@( () => request.Username)" />
        </div>

        <button type="submit">Sign In</button>
    </EditForm>    
}

@if (EnterNewPassword)
{
    <EditForm Model="request" OnValidSubmit="Complete" FormName="ForgotPassword">
        <div style="color:red;">@CustomError</div>
        <DataAnnotationsValidator />       
        <CustomValidator @ref="customValidator"></CustomValidator>

        <div>
            <InputText @bind-Value="request.NewPassword" id="newPassword" placeholder="Password" />
            <ValidationMessage For="@( () => request.NewPassword)" />
        </div>
        <div>
            <InputText @bind-Value="request.ConfirmPassword" id="confirmPassword" placeholder="Confirm Password" />
            <ValidationMessage For="@( () => request.ConfirmPassword)" />
        </div>

        <button type="submit">Sign In</button>
    </EditForm>
}

@if (EmailSent)
{
    <div>
        <div style="color:green;">
        <p>Forgot your password?</p>

        <p>We’ll send you instructions to your email "@(request.Username)" on how to reset your password.</p>

        <p> If you have not received an email from us, please check your 'spam' folder.</p>
        </div>
    </div>
}

@if (PasswordChanged)
{
    <div style="color:green;">
        Your password has been changed successfully
    </div>
}
@code {
    private string CustomError;
    private bool PasswordChanged = false;
    private bool EnterEmail = false;
    private bool EnterNewPassword = false;
    private bool EmailSent = false;
    private ForgotPasswordDto request = new();
    private CustomValidator customValidator;
    [SupplyParameterFromQuery]
    private string? Username { get; set; }

    [SupplyParameterFromQuery]
    private string? Key { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/");
            }

            else
            {
                await InitializePage();
            }
        }
        else
        {
            await InitializePage();
        }
    }

    private async Task InitializePage()
    {
        if (Username == null || Key == null)
        {
            EnterEmail = true;
            EnterNewPassword = false;
            EmailSent = false;
            PasswordChanged = false;

            return;
        }

        ForgotPasswordDto dto = new()
            {
                Username = Username,
                Key = Key
            };

        var userKeyIsValid = await userManager.ValidateUserKey(dto.Username, dto.Key);
        if (userKeyIsValid.ResponseCode != "00")
        {
            EnterEmail = true;
            EnterNewPassword = false;
            EmailSent = false;
            PasswordChanged = false;

            return;
        }

        EnterEmail = false;
        EnterNewPassword = true;
        EmailSent = false;
        PasswordChanged = false;


    }
    private async Task SendEmail()
    {
        ForgotPasswordDto dto = new()
        {
            Username = request.Username
        };


        var errors = new Dictionary<string, List<string>>();

        var result = await users.SendForgotPasswordEmail(dto);

        if (result.ResponseCode != "00")
        {
            errors.Add("", new List<string> { result.ResponseMessage });
            customValidator.DisplayErrors(errors);
            return;
        }

        EnterEmail = false;
        EnterNewPassword = false;
        EmailSent = true;
        PasswordChanged = false;

    }

    private async Task Complete()
    {
        ForgotPasswordDto dto = new()
        {            
            Username = Username,
            Key = Key,
            NewPassword = request.NewPassword,
            ConfirmPassword = request.ConfirmPassword
        };

        var errors = new Dictionary<string, List<string>>();

        if (string.IsNullOrWhiteSpace(dto.NewPassword))
        {
            errors.Add("NewPassword", new List<string> { "New Password is required" });
            customValidator.DisplayErrors(errors);
            return;
        }

        if(dto.NewPassword != dto.ConfirmPassword)
        {
            errors.Add("ConfirmPassword", new List<string> { "This must be the same as password"});
            customValidator.DisplayErrors(errors);
            return;
        }

        var result = await userManager.ForgotPassword(dto);

        if (result.ResponseCode != "00")
        {
            CustomError = result.ResponseMessage;          
            return;
        }

        EnterEmail = false;
        EnterNewPassword = false;
        EmailSent = false;
        PasswordChanged = true;
    }
}
