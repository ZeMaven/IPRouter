@page "/weather"
@attribute [StreamRendering(true)]
@inject SwitchPortal.Actions.Rules.IAmountRule _amountRule
@using System.ComponentModel.DataAnnotations;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />


        <div class="form-floating mb-3">
            <InputText type="Text" @bind-Value="Input.Processor" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Processor" />
            <label for="Processor" class="form-label">Processor</label>
            <ValidationMessage For="() => Input.Processor" class="text-danger" />

            <InputNumber type="number" @bind-Value="Input.AmountA" class="form-control" aria-required="true" placeholder="Amount band A" />
            <label for="AmountA" class="form-label">AmountA</label>
            <ValidationMessage For="() => Input.AmountA" class="text-danger" />

            <InputNumber type="number" @bind-Value="Input.AmountZ" class="form-control" aria-required="true" placeholder="Amount band B" />
            <label for="AmountZ" class="form-label">AmountZ</label>
            <ValidationMessage For="() => Input.AmountZ" class="text-danger" />

            <button class="w-100 btn btn-lg btn-primary" type="submit">Submit</button>
        </div>


    </EditForm>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;



    [SupplyParameterFromForm]
    private Models.ViewModels.Rules.Amount.AmountDetails Input { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {



        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }


    protected async Task OnValidSubmitAsync()
    {

        var Resp = await _amountRule.Create(new Models.ViewModels.Rules.Amount.AmountDetails
            {
                AmountA = Input.AmountA,
                AmountZ = Input.AmountZ,
                Processor = Input.Processor

            });



    }

    // public class Inpute
    // {
    //     [Required, Display(Name = "Processor")]
    //     public string Processor { get; set; }

    //     public decimal AmountA { get; set; }
    //     public decimal AmountB { get; set; }

    // }


    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
